# –§–∞–π–ª: handlers/settings.py

from aiogram import types, Dispatcher
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from utils.db import SessionLocal
from models.user import User
from handlers.menu import main_menu_keyboard

# 1) FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
class SettingsStates(StatesGroup):
    choosing_action = State()
    changing_language = State()
    changing_ui = State()
    changing_role = State()


# 2) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
def settings_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")],
            [KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º UI")],
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ")]  # —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return kb


# 3) Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def language_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
            InlineKeyboardButton(text="English", callback_data="set_lang_en"),
        ]
    ])


# 4) Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ UI-—Ä–µ–∂–∏–º–∞
def ui_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="set_ui_standard"),
            InlineKeyboardButton(text="–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π", callback_data="set_ui_simple"),
        ]
    ])


# 5) Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
def role_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–∞—Ü–∏–µ–Ω—Ç", callback_data="set_role_patient"),
            InlineKeyboardButton(text="–ü–æ–º–æ—â–Ω–∏–∫", callback_data="set_role_assistant"),
        ]
    ])


# === –•–≠–ù–î–õ–ï–†: –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
async def cmd_settings(message: types.Message, state: FSMContext):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    session.close()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å ‚Äì –≤–≤–µ–¥–∏—Ç–µ /start")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_keyboard())
    await state.set_state(SettingsStates.choosing_action)


# === –®–ê–ì: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ===
async def process_settings_choice(message: types.Message, state: FSMContext):
    text = message.text
    if text == "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_inline_kb())
        await state.set_state(SettingsStates.changing_language)
    elif text == "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º UI":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", reply_markup=ui_inline_kb())
        await state.set_state(SettingsStates.changing_ui)
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_inline_kb())
        await state.set_state(SettingsStates.changing_role)
    elif text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ":
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        session = SessionLocal()
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        session.close()
        kb = main_menu_keyboard(user)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    else:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


# === –®–ê–ì: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫ ===
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    lang = "ru" if callback.data.endswith("_ru") else "en"
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    if user:
        user.language = lang
        session.add(user)
        session.commit()
    session.close()

    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await callback.message.edit_text(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'–†—É—Å—Å–∫–∏–π' if lang=='ru' else 'English'}.")
    await callback.answer()

    await callback.message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_keyboard())
    await state.set_state(SettingsStates.choosing_action)


# === –®–ê–ì: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π UI-—Ä–µ–∂–∏–º ===
async def set_ui_mode(callback: types.CallbackQuery, state: FSMContext):
    ui_mode = "standard" if callback.data.endswith("_standard") else "simple"
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    if user:
        user.ui_mode = ui_mode
        session.add(user)
        session.commit()
    session.close()

    await callback.message.edit_text(f"–†–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' if ui_mode=='standard' else '–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π'}.")
    await callback.answer()

    await callback.message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_keyboard())
    await state.set_state(SettingsStates.choosing_action)


# === –®–ê–ì: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å ===
async def set_role(callback: types.CallbackQuery, state: FSMContext):
    role = "patient" if callback.data.endswith("_patient") else "assistant"
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
    if user:
        user.role = role
        session.add(user)
        session.commit()
    session.close()

    await callback.message.edit_text(f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'–ü–∞—Ü–∏–µ–Ω—Ç' if role=='patient' else '–ü–æ–º–æ—â–Ω–∏–∫'}.")
    await callback.answer()

    await callback.message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_keyboard())
    await state.set_state(SettingsStates.choosing_action)


# === –•–≠–ù–î–õ–ï–† /profile (–ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫) ===
async def cmd_profile(message: types.Message):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    session.close()

    if not user:
        await message.answer("‚ùóÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.")
        return

    text = (
        f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ Telegram ID: {user.telegram_id}\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {user.language}\n"
        f"‚Ä¢ UI-—Ä–µ–∂–∏–º: {user.ui_mode}\n"
        f"‚Ä¢ –†–æ–ª—å: {user.role}\n"
        f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone or '–Ω–µ –∑–∞–¥–∞–Ω'}\n"
    )
    await message.answer(text)


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –•–≠–ù–î–õ–ï–†–û–í ===
def register_handlers(dp: Dispatcher):
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    dp.message.register(cmd_settings, lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
    dp.message.register(
        process_settings_choice,
        StateFilter(SettingsStates.choosing_action)
    )

    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —è–∑—ã–∫–∞
    dp.callback_query.register(
        set_language,
        lambda c: c.data and c.data.startswith("set_lang_"),
        StateFilter(SettingsStates.changing_language)
    )

    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è UI-—Ä–µ–∂–∏–º–∞
    dp.callback_query.register(
        set_ui_mode,
        lambda c: c.data and c.data.startswith("set_ui_"),
        StateFilter(SettingsStates.changing_ui)
    )

    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–ª–∏
    dp.callback_query.register(
        set_role,
        lambda c: c.data and c.data.startswith("set_role_"),
        StateFilter(SettingsStates.changing_role)
    )

    # –•—ç–Ω–¥–ª–µ—Ä /profile
    dp.message.register(cmd_profile, lambda m: m.text == "/profile")
