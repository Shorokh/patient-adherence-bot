# –§–∞–π–ª: handlers/menu.py

from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from utils.db import SessionLocal
from models.user import User
from models.medication import Medication

def main_menu_keyboard(user: User) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç")],
            [KeyboardButton(text="üíä –ú–æ–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return kb

async def show_main_menu(message: types.Message):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    session.close()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
        return

    kb = main_menu_keyboard(user)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)


# === –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä ¬´–ú–æ–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã¬ª ===
async def show_my_medications(message: types.Message):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
        session.close()
        return

    meds = session.query(Medication).filter(Medication.user_id == message.from_user.id).all()
    session.close()

    if not meds:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç
    for med in meds:
        text = f"‚Ä¢ {med.name} ‚Äî {med.dosage}\n"
        text += f"  –¢–∏–ø: {'–†–µ–≥—É–ª—è—Ä–Ω—ã–π' if med.intake_type == 'regular' else '–°–∏—Ç—É–∞—Ç–∏–≤–Ω—ã–π'}\n"
        if med.intake_type == "regular" and med.time_list:
            times = ", ".join(med.time_list)
            text += f"  –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ (—á—á:–º–º): {times}\n"
        if med.conditions:
            cond = ", ".join(med.conditions)
            text += f"  –£—Å–ª–æ–≤–∏—è: {cond}\n"
        if med.skip_behavior and med.intake_type == "regular":
            skip_map = {
                "double": "–£–¥–≤–æ–∏—Ç—å",
                "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                "none": "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            }
            text += f"  –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ: {skip_map.get(med.skip_behavior, med.skip_behavior)}\n"

        # –î–ª—è —Å–∏—Ç—É–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ–º Inline-–∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—ë–º¬ª
        if med.intake_type == "situational":
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—ë–º", callback_data=f"take_sit:{med.id}")]
            ])
            await message.answer(text, reply_markup=kb)
        else:
            # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await message.answer(text)


def register_handlers(dp: Dispatcher):
    dp.message.register(
        show_main_menu,
        lambda m: m.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or m.text == "–ú–µ–Ω—é"
    )
    dp.message.register(
        show_my_medications,
        lambda m: m.text == "üíä –ú–æ–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã"
    )
